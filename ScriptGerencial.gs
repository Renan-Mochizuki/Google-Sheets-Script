const ui = SpreadsheetApp.getUi();
// Fun√ß√£o para adicionar o menu
function onOpen(e) {
	ui.createMenu('Menu de Fun√ß√µes')
		.addItem('üìÇ Importar Dados', 'Importar')
		.addItem('üìû Sincronizar campos do Whatsapp', 'SincronizarWhatsGerencial')
		// .addItem('üë§ Criar contatos', 'CriaContatos')
		.addItem('üóëÔ∏è Excluir todos os campos', 'LimparPlanilha')
		.addSeparator()
		.addSubMenu(ui.createMenu('Formata√ß√£o da planilha')
			.addItem('Formatar campos telefone', 'FormatarLinhasTelefone')
			.addItem('Completar campos vazios com N√ÉO', 'CompletarVaziosComNao')
			.addItem('Remover linhas vazias', 'RemoverLinhasVazias')
			.addItem('Mostrar todas linhas', 'MostrarTodasLinhas')
			.addItem('Esconder linhas', 'MostrarInterfaceEsconderLinhas'))
		.addToUi();
}


// -- IMPORTANTE --
// VEJA OS COMENT√ÅRIOS DO ARQUIVO CONSTANTS


// Fun√ß√£o que verificar√° se o email existe na planilha desejada e retornar√° a linha
function RetornarLinhaDados(nomeProcurado, emailProcurado, telefoneProcurado, dados) {
	// Separando o email procurado pois ele pode ser um valor com mais de um email
	const nomesProcuradosSeparados = nomeProcurado ? NormalizarString(nomeProcurado).split(';') : [nomeProcurado];
	const emailsProcuradosSeparados = emailProcurado ? NormalizarString(emailProcurado).split(';') : [emailProcurado];
	const telefonesProcuradosSeparados = telefoneProcurado ? telefoneProcurado.toString().split(';') : [telefoneProcurado];

	// Conferir todos os emails da planilha desejada
	for (let i = 0; i < dados.length; i++) {
		const nomeDados = dados[i][0];
		const emailDados = dados[i][1];
		const telefoneDados = dados[i][2];

		if(VerificarLinhaDados(emailDados, emailsProcuradosSeparados, 0.8)){
			const resultadoVerificacaoTel = VerificarLinhaDados(telefoneDados, telefonesProcuradosSeparados, 0.8);

			if(VerificarLinhaDados(nomeDados, nomesProcuradosSeparados, 0.5)){
				if(resultadoVerificacaoTel === 0) continue;
				
				return i + 2;
			}
		}
		
		if(VerificarLinhaDados(telefoneDados, telefonesProcuradosSeparados, 0.9)){
			if(VerificarLinhaDados(emailDados, emailsProcuradosSeparados, 0.7) || VerificarLinhaDados(nomeDados, nomesProcuradosSeparados, 0.5)){
				return i + 2;
			}
		}
	}
	// Se n√£o for encontrado nenhum 
	return false;
}

function VerificarLinhaDados(dadosCampo, dadosProcuradosSeparados, tolerancia){

	if(!dadosCampo) return false;

	const dadosSeparados = dadosCampo.toString().split(';');

	for (let dadoSeparado of dadosSeparados){
		// Pegar apenas o email sem o dom√≠nio
		if(dadoSeparado.includes('@')) dadoSeparado = dadoSeparado.split('@')[0];

		for(let dadoProcuradoSeparado of dadosProcuradosSeparados){
			// Pegar apenas o email sem o dom√≠nio
			if(dadoProcuradoSeparado.includes('@')) dadoProcuradoSeparado = dadoProcuradoSeparado.split('@')[0];

			// Se o telefone for encontrado, retorne o indice da array + 2 (Porque a array come√ßa em 0 e a planilha em 2)
			if (CompararSimilaridade(dadoProcuradoSeparado, dadoSeparado, tolerancia)) {
				return true;
			}
			if(dadoProcuradoSeparado.includes('+') != dadoSeparado.includes('+')){
				return 0;
			}
		}
	}
	return false;
}

// Fun√ß√£o que executa outras fun√ß√µes para importar os dados de cada planilha
function Importar() {
	const tituloToast = 'Executando fun√ß√µes';
	let totalLinhasAfetadas = 0;

	// Formatando os telefones de todas as planilhas
	planilhaAtiva.toast('Formatando telefones de todas planilhas', tituloToast, tempoNotificacao);
	FormatarLinhasTelefoneTodasAbas();
	// // Chamando fun√ß√µes das planilhas para atualizar seus campos
	// planilhaAtiva.toast('Sincronizando campos Whats', tituloToast, tempoNotificacao);
	// SincronizarCampoPlanilhas(abaInteresse, colWhatsInteresse, abaMarcoZero, colWhatsMarcoZero);
	// // Verifica na planilha Interesse, quem respondeu o Marco Zero, e verifica na planilha Marco Zero, quem respondeu o Interesse
	// planilhaAtiva.toast('Verificando respostas Marco Zero', tituloToast, tempoNotificacao);
	// VerificarEMarcarCadastroOutraPlanilha(abaInteresse, colRespondeuMarcoZeroInteresse, abaMarcoZero);
	// planilhaAtiva.toast('Verificando respostas Interesse', tituloToast, tempoNotificacao);
	// VerificarEMarcarCadastroOutraPlanilha(abaMarcoZero, colRespondeuInteresseMarcoZero, abaInteresse, null, "S. P√öBLICA");

	planilhaAtiva.toast(tituloToast, 'Importando dados da Interesse', tempoNotificacao);
	totalLinhasAfetadas += ImportarDados(abaInteresse);

	planilhaAtiva.toast(tituloToast, 'Importando notas da Interesse', tempoNotificacao);
	ImportarNotas(abaInteresse);

	const ultimaLinhaDepoisDaInteresse = abaGerencial.getLastRow();
	
	planilhaAtiva.toast(tituloToast, 'Importando dados do Marco Zero', tempoNotificacao);
	totalLinhasAfetadas += ImportarDados(abaMarcoZero);

	const ultimaLinhaDepoisDoMarcoZero = abaGerencial.getLastRow();
	const intervaloInicioPintar = ultimaLinhaDepoisDaInteresse + 1;
	const intervaloFimPintar = ultimaLinhaDepoisDoMarcoZero - intervaloInicioPintar + 1;

	// Pintando campos cidade e estado, situa√ß√£o e redirecionamento para interesse das pessoas de S. P√öBLICA (esses campos nunca ter√£o valor)
	abaGerencial.getRange(intervaloInicioPintar, colCidadeGerencial, intervaloFimPintar, 2).setBackground(corCampoSemDados);
	abaGerencial.getRange(intervaloInicioPintar, colSituacaoGerencial, intervaloFimPintar, 1).setBackground(corCampoSemDados);
	abaGerencial.getRange(intervaloInicioPintar, colRedirectInteresseGerencial, intervaloFimPintar, 1).setBackground(corCampoSemDados);

	planilhaAtiva.toast(tituloToast, 'Importando dados do Envio de Mapa', tempoNotificacao);
	totalLinhasAfetadas += ImportarDados(abaEnvioMapa);

	planilhaAtiva.toast(tituloToast, 'Importando dados do Marco Final', tempoNotificacao);
	totalLinhasAfetadas += ImportarDados(abaMarcoFinal);

	planilhaAtiva.toast(tituloToast, 'Importando dados do Envio do Certificado', tempoNotificacao);
	totalLinhasAfetadas += ImportarDados(abaCertificado);

	const quantidadeLinhasCriadas = abaGerencial.getLastRow() - ultimaLinhaGerencial;
	const mensagem = 'Fim da execu√ß√£o.\n' + quantidadeLinhasCriadas + ' linhas criadas e ' + totalLinhasAfetadas + ' linhas j√° registradas analisadas';
	planilhaAtiva.toast(mensagem, 'Execu√ß√£o finalizada', tempoNotificacao);
}

// Fun√ß√£o gen√©rica de importa√ß√£o para todas planilhas
function ImportarDados(abaDesejada) {
	// Pegando a pr√≥xima linha vazia da planilha gerencial
	// Obs.: N√£o se pode usar a vari√°vel ultimaLinhaGerencial, pois ela n√£o se atualiza sozinha
	const ultimaLinhaGerencial = abaGerencial.getLastRow();
	let linhaVazia = ultimaLinhaGerencial + 1;
	let linhasAfetadas = 0;

	// Atribui as vari√°veis de acordo com a abaDesejada
	const { nomePlanilha, ultimaLinhaAnalisada, ultimaLinha, ultimaColuna, colNome, colEmail, colTel, ImportarDadosPlanilha } = objetoMap.get(abaDesejada);

	// Pegando todos os emails e telefones da abaGerencial
	const nomesEmailsTelefones = abaGerencial.getRange(2, colNomeGerencial, ultimaLinhaGerencial, 3).getValues();

	// Loop para percorrer todas linhas da planilha Desejada
	for (let i = ultimaLinhaAnalisada; i <= ultimaLinha; i++) {
		// Pegando os valores da linha e definindo o primeiro item como null para podermos acessar os √≠ndices sem precisar subtrair 1
		const valLinha = [null, ...abaDesejada.getRange(i, 1, 1, ultimaColuna).getValues()[0]];

		const nome = valLinha[colNome];
		const email = valLinha[colEmail];
		const telefone = valLinha[colTel]

		// Se n√£o existir email, ou for o "teste" passe para o pr√≥ximo
		if (!email || email.toLowerCase().includes("teste")) continue;

		// Toast da mensagem do progresso de execu√ß√£o da fun√ß√£o
		if (i % 100 === 0) {
			const tituloToast = Math.round(i / ultimaLinha * 100) + '% conclu√≠do da fun√ß√£o atual';
			planilhaAtiva.toast('Processo na linha ' + i + ' da planilha ' + nomePlanilha, tituloToast, tempoNotificacao);
		}

		const linhaCampoGerencial = RetornarLinhaDados(nome, email, telefone, nomesEmailsTelefones);
		const foiCastradoNovoEmail = ImportarDadosPlanilha(valLinha, i, linhaCampoGerencial, linhaVazia);

		if (foiCastradoNovoEmail) {
			const novoRegistro = [nome, email, telefone];
			linhaVazia++;
			// Insira o novo email e tel na matriz de dados (Se o primeiro item estiver vazio, substitua o item vazio)
			if(!nomesEmailsTelefones[0][1]){
				nomesEmailsTelefones[0] = novoRegistro;
				continue;
			}

			nomesEmailsTelefones.push(novoRegistro);
		}
		else linhasAfetadas++;
	}

	return linhasAfetadas;
}

// Fun√ß√£o com a l√≥gica da importa√ß√£o dos campos da planilha de interesse
function ImportarDadosInteresse(valLinha, linhaAtual, linhaCampoGerencial, linhaVazia) {
	// Declarando uma array com os campos adicionais da planilha Interesse com "SIM" para o campo "Respondeu Interesse" na Gerencial
	// Considerando a ordem dos campos da planilha Gerencial (Ver ORDEM OBRIGAT√ìRIA DOS CAMPOS)
	const intervaloInserir = [
		valLinha[colAnotacaoInteresse],
		null,
		valLinha[colNomeInteresse],
		valLinha[colEmailInteresse],
		valLinha[colTelInteresse],
		valLinha[colCidadeInteresse],
		valLinha[colEstadoInteresse],
		valLinha[colWhatsInteresse],
		"SIM",
		valLinha[colRespondeuMarcoZeroInteresse],
		valLinha[colSituacaoInteresse]
	]

	// Se aquele email ainda n√£o estiver registrado na planilha gerencial
	if (!linhaCampoGerencial) {
		// Inserindo os campos na planilha gerencial
		abaGerencial.getRange(linhaVazia, colAnotacaoGerencial, 1, 11).setValues([intervaloInserir]);
		InserirRedirecionamentoPlanilha(linhaVazia, colRedirectInteresseGerencial, urlInteresse, linhaAtual);

		// Nova linha criada
		return true;
	} else {
		// Pegando os valores daquela linha da planilha gerencial, pois alguem pode responder mais de uma vez
		// Nesse caso, n√£o definiremos o primeiro item como null pois queremos manter os √≠ndices originais
		const valLinhaGerencial = abaGerencial.getRange(linhaCampoGerencial, colAnotacaoGerencial, 1, 11).getValues()[0];

		// Juntando os dados j√° existentes da planilha gerencial com os novos dados
		const intervaloUnido = JuntarDados(valLinhaGerencial, intervaloInserir, colAnotacaoGerencial);
		
		// Inserindo os campos na planilha gerencial
		abaGerencial.getRange(linhaCampoGerencial, colAnotacaoGerencial, 1, 11).setValues([intervaloUnido]);
		
		// Nenhuma linha criada
		return false;
	}
}

// Fun√ß√£o com a l√≥gica da importa√ß√£o dos campos do marco zero que n√£o est√£o na planilha de interesse
function ImportarDadosMarcoZero(valLinha, linhaAtual, linhaCampoGerencial, linhaVazia) {
	// Pegando o campo se est√° cadastrada na planilha de interesse
	const respondeuInteresseMarcoZero = valLinha[colRespondeuInteresseMarcoZero];

	// Considerando a ordem dos campos da planilha Gerencial (Ver ORDEM OBRIGAT√ìRIA DOS CAMPOS)
	const intervaloInserir = [
		valLinha[colNomeMarcoZero],
		valLinha[colEmailMarcoZero],
		valLinha[colTelMarcoZero],
		null,
		null,
		valLinha[colWhatsMarcoZero],
		respondeuInteresseMarcoZero,
		"SIM"
	]

	// Se aquela pessoa ainda n√£o estiver registrado na planilha gerencial
	if (!linhaCampoGerencial) {
		// Inserindo os campos na planilha gerencial
		abaGerencial.getRange(linhaVazia, colNomeGerencial, 1, 8).setValues([intervaloInserir]);
		InserirRedirecionamentoPlanilha(linhaVazia, colRedirectMarcoZeroGerencial, urlMarcoZero, linhaAtual);

		// Nova linha criada
		return true;
	} else {
		// Se a pessoa j√° estiver registrado na planilha gerencial
		InserirRedirecionamentoPlanilha(linhaCampoGerencial, colRedirectMarcoZeroGerencial, urlMarcoZero, linhaAtual);

		// Pegando os valores daquela linha da planilha gerencial, pois alguem pode responder mais de uma vez
		// Nesse caso, n√£o definiremos o primeiro item como null pois queremos manter os √≠ndices originais
		const valLinhaGerencial = abaGerencial.getRange(linhaCampoGerencial, colNomeGerencial, 1, 8).getValues()[0];

		// Juntando os dados j√° existentes da planilha gerencial com os novos dados
		const intervaloUnido = JuntarDados(valLinhaGerencial, intervaloInserir, colNomeGerencial);

		// Inserindo os campos na planilha gerencial
		abaGerencial.getRange(linhaCampoGerencial, colNomeGerencial, 1, 8).setValues([intervaloUnido]);
		
		// Nenhuma linha criada
		return false;
	}
}

// Fun√ß√£o com a l√≥gica da importa√ß√£o dos campos do envio do mapa
function ImportarDadosEnvioMapa(valLinha, linhaAtual, linhaCampoGerencial, linhaVazia) {
	// Se aquele email ainda n√£o estiver registrado na planilha gerencial
	if (!linhaCampoGerencial) {
		LidarComPessoaNaoCadastrada(valLinha, linhaAtual, linhaVazia, abaEnvioMapa);
		// Nova linha criada
		return true;
	}

	const dataMapa = valLinha[colDataEnvioMapa];
	const prazoEnvioMapa = valLinha[colPrazoEnvioMapa];

	// Caso ainda n√£o existir prazo, calcular um novo adicionando 7 dias
	const dataPrazo = (!prazoEnvioMapa && dataMapa) ? new Date(dataMapa.setDate(dataMapa.getDate() + 7)) : prazoEnvioMapa;
	const comentarioEnviadoMapa = (valLinha[colComentarioEnviadoMapa] || '').toUpperCase()

	// Considerando a ordem dos campos da planilha Gerencial (Ver ORDEM OBRIGAT√ìRIA DOS CAMPOS)
	const intervaloInserir = [
		valLinha[colLinkMapa],
		valLinha[colTextoMapa],
		dataPrazo,
		comentarioEnviadoMapa,
		valLinha[colMensagemVerificacaoMapa]
	]

	abaGerencial.getRange(linhaCampoGerencial, colLinkMapaGerencial, 1, 5).setValues([intervaloInserir]);
	InserirRedirecionamentoPlanilha(linhaCampoGerencial, colRedirectEnvioMapaGerencial, urlEnvioMapa, linhaAtual);

	// Nenhuma linha nova criada
	return false;
}

// Fun√ß√£o com a l√≥gica da importa√ß√£o dos campos do envio do mapa
function ImportarDadosMarcoFinal(valLinha, linhaAtual, linhaCampoGerencial, linhaVazia) {
	// Se aquele email ainda n√£o estiver registrado na planilha gerencial
	if (!linhaCampoGerencial) {
		LidarComPessoaNaoCadastrada(valLinha, linhaAtual, linhaVazia, abaMarcoFinal);
		// Nova linha criada
		return true;
	}

	const enviouReflexaoMarcoFinal = (valLinha[colEnviouReflexaoMarcoFinal] || '').toUpperCase();
	const comentarioEnviadoMarcoFinal = (valLinha[colComentarioEnviadoMarcoFinal] || '').toUpperCase()

	// Considerando a ordem dos campos da planilha Gerencial (Ver ORDEM OBRIGAT√ìRIA DOS CAMPOS)
	const intervaloInserir = [
		"SIM",
		enviouReflexaoMarcoFinal,
		valLinha[colPrazoEnvioMarcoFinal],
		comentarioEnviadoMarcoFinal
	]

	abaGerencial.getRange(linhaCampoGerencial, colRespondeuMarcoFinalGerencial, 1, 4).setValues([intervaloInserir]);
	InserirRedirecionamentoPlanilha(linhaCampoGerencial, colRedirectMarcoFinalGerencial, urlMarcoFinal, linhaAtual);

	// Nenhuma linha criada
	return false;
}

// Fun√ß√£o com a l√≥gica da importa√ß√£o dos campos do envio do mapa
function ImportarDadosCertificado(valLinha, linhaAtual, linhaCampoGerencial, linhaVazia) {
	// Se aquele email ainda n√£o estiver registrado na planilha gerencial
	if (!linhaCampoGerencial) {
		LidarComPessoaNaoCadastrada(valLinha, linhaAtual, linhaVazia, abaCertificado);
		// Nova linha criada
		return true;
	}

	const linkTestadoCertificado = (valLinha[colLinkTestadoCertificado] || '').toUpperCase();
	const valEntrouGrupo = valLinha[colEntrouGrupoCertificado];

	// Transforme o texto em ma√≠sculas se ele n√£o for 'Enviei email'
	const entrouGrupoCertificado = (valEntrouGrupo && valEntrouGrupo != "Enviei email") ? valEntrouGrupo.toUpperCase() : valEntrouGrupo;

	// Considerando a ordem dos campos da planilha Gerencial (Ver ORDEM OBRIGAT√ìRIA DOS CAMPOS)
	const intervaloInserir = [
		valLinha[colDataCertificado],
		valLinha[colLinkCertificado],
		linkTestadoCertificado,
		entrouGrupoCertificado
	]

	abaGerencial.getRange(linhaCampoGerencial, colTerminouCursoGerencial).setValue("SIM");
	abaGerencial.getRange(linhaCampoGerencial, colDataCertificadoGerencial, 1, 4).setValues([intervaloInserir]);
	InserirRedirecionamentoPlanilha(linhaCampoGerencial, colRedirectCertificadoGerencial, urlCertificado, linhaAtual);

	// Nenhuma linha criada
	return false;
}

// Fun√ß√£o que ir√° lidar com pessoas que est√£o em formul√°rios posteriores sem estar na de interesse ou marco zero
function LidarComPessoaNaoCadastrada(valLinha, linhaAtual, linhaVazia, abaDesejada) {

	// Atribui as vari√°veis de acordo com a abaDesejada
	const { colNome, colEmail, colTel, ImportarDadosPlanilha } = objetoMap.get(abaDesejada);

	Logger.log('Email n√£o cadastrado: ' + valLinha[colEmail]);

	// Considerando a ordem dos campos da planilha Gerencial (Ver ORDEM OBRIGAT√ìRIA DOS CAMPOS)
	const intervaloInserir = [
		"Pessoa n√£o cadastrada nas outras planilhas",
		null,
		valLinha[colNome],
		valLinha[colEmail],
		valLinha[colTel]
	]

	abaGerencial.getRange(linhaVazia, colAnotacaoGerencial, 1, 5).setValues([intervaloInserir]);

	// Preencher os outros dados da planilha
	ImportarDadosPlanilha(valLinha, linhaAtual, linhaVazia, linhaVazia + 1);
}

// Fun√ß√£o que adiciona um link para redirecionamento na planilha gerencial
function InserirRedirecionamentoPlanilha(linhaInserir, colInserir, urlDestino, linhaDestino) {
	// Express√£o regular para extrair o ID da planilha e o ID da aba pelo link daquela planilha
	const regex = /\/d\/([a-zA-Z0-9-_]+).*gid=([0-9]+)/;
	const matches = urlDestino.match(regex);

	// Se o link n√£o estiver correto, finalize a fun√ß√£o
	if (!matches) return;

	const planilhaID = matches[1];
	const abaID = matches[2];
	const urlRedirecionamento = `https://docs.google.com/spreadsheets/d/${planilhaID}/edit#gid=${abaID}&range=A${linhaDestino}`;

	// Adiciona um link para redirecionamento na planilha gerencial
	abaGerencial.getRange(linhaInserir, colInserir).setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP).setValue(urlRedirecionamento);
}

// Fun√ß√£o que sincronizar√° quem entrou no whatsapp entre as tr√™s planilhas
function SincronizarWhatsGerencial() {
	// Sincronize as planilhas Interesse e Marco Zero, depois as planilhas Interesse e Gerencial e por fim, Interesse e Marco Zero de novo
	SincronizarCampoPlanilhas(abaInteresse, colWhatsInteresse, abaMarcoZero, colWhatsMarcoZero);
	planilhaAtiva.toast('Primeiro processo de sincroniza√ß√£o de Whats conclu√≠da', '33% conclu√≠do da fun√ß√£o atual', tempoNotificacao);
	SincronizarCampoPlanilhas(abaInteresse, colWhatsInteresse, abaGerencial, colWhatsGerencial);
	planilhaAtiva.toast('Segundo processo de sincroniza√ß√£o de Whats conclu√≠da', '67% conclu√≠do da fun√ß√£o atual', tempoNotificacao);
	SincronizarCampoPlanilhas(abaInteresse, colWhatsInteresse, abaMarcoZero, colWhatsMarcoZero);
}

// Fun√ß√£o que sincronizar√° um dado campo entre duas planilhas passadas
function SincronizarCampoPlanilhas(abaDesejada1, colDesejada1, abaDesejada2, colDesejada2) {
	// Atribui as vari√°veis de acordo com a abaDesejada1
	const { ultimaLinha: ultimaLinha1, colNome: colNome1, nomePlanilha: nomePlanilha1 } = objetoMap.get(abaDesejada1);
	// Atribui as vari√°veis de acordo com a abaDesejada2
	const { ultimaLinha: ultimaLinha2, colNome: colNome2, nomePlanilha: nomePlanilha2 } = objetoMap.get(abaDesejada2);

	// Pegando todos os emails da abaDesejada1 e abaDesejada2
	const nomesEmailsTelefones1 = abaDesejada1.getRange(2, colNome1, ultimaLinha1, 3).getValues();
	const nomesEmailsTelefones2 = abaDesejada2.getRange(2, colNome2, ultimaLinha2, 3).getValues();

	const colsDesejadas1 = abaDesejada1.getRange(2, colDesejada1, ultimaLinha1, 1).getValues();
	const colsDesejadas2 = abaDesejada2.getRange(2, colDesejada2, ultimaLinha2, 1).getValues();

	// Loop para percorrer as linhas da abaDesejada1
	for (let i = 0; i < nomesEmailsTelefones1.length; i++) {
		const nome = nomesEmailsTelefones1[i][0];
		const email = nomesEmailsTelefones1[i][1];
		const telefone = nomesEmailsTelefones1[i][2];

		// Se n√£o existir email, ou for o "teste" passe para o pr√≥ximo
		if (!email || email.toLowerCase().includes("teste")) continue;

		// Pegue a linha do campo na planilha desejada 2
		const linhaCampoDesejada2 = RetornarLinhaDados(nome, email, telefone, nomesEmailsTelefones2);

		// Se o email for encontrado na outra planilha
		if (linhaCampoDesejada2) {
			const valDesejada1 = colsDesejadas1[i][0];
			const valDesejada2 = colsDesejadas2[linhaCampoDesejada2 - 2][0];
			// Se o campo do Desejada1 estiver vazio, altere o campo do Desejada1 com o valor da outra planilha
			if (!valDesejada1) colsDesejadas1[i][0] = valDesejada2;
			// Se o campo da outra planilha estiver vazio, altere o campo da outra planilha com o valor do Desejada1
			else if (!valDesejada2) colsDesejadas2[linhaCampoDesejada2 - 2][0] = valDesejada1;
			// Se o campo do Desejada1 estiver como sim e da outra como n√£o, altere o campo da outra planilha
			else if (valDesejada1 == "SIM") colsDesejadas2[linhaCampoDesejada2 - 2][0] = "SIM";
			// Se o campo da outra planilha estiver como sim e da outra como n√£o, altere o campo do Desejada1
			else if (valDesejada2 == "SIM") colsDesejadas1[i][0] = "SIM";
		}
	}
	// Toast da mensagem do progresso de execu√ß√£o da fun√ß√£o
	const tituloToast ='50% conclu√≠do da fun√ß√£o atual';
	const textoToast = 'Sincronizando campo entre planilhas ' + nomePlanilha1 + ' e ' + nomePlanilha2;
	planilhaAtiva.toast(textoToast, tituloToast, tempoNotificacao);

	// Loop para percorrer as linhas da abaDesejada2 (Caso houver uma pessoa repetida na abaDesejada2)
	for (let i = 0; i < nomesEmailsTelefones2.length; i++) {
		const nome = nomesEmailsTelefones2[i][0];
		const email = nomesEmailsTelefones2[i][1];
		const telefone = nomesEmailsTelefones2[i][2];

		// Se n√£o existir email, ou for o "teste" passe para o pr√≥ximo
		if (!email || email.toLowerCase().includes("teste")) continue;

		// Pegue a linha do campo na planilha desejada 1
		const linhaCampoDesejada1 = RetornarLinhaDados(nome, email, telefone, nomesEmailsTelefones1);

		// Se o email for encontrado na outra planilha
		if (linhaCampoDesejada1) {
			const valDesejada1 = colsDesejadas1[linhaCampoDesejada1 - 2][0];
			const valDesejada2 = colsDesejadas2[i][0];
			// Se o campo do Desejada1 estiver vazio, altere o campo do Desejada1 com o valor da outra planilha
			if (!valDesejada1) colsDesejadas1[linhaCampoDesejada1 - 2][0] = valDesejada2;
			// Se o campo da outra planilha estiver vazio, altere o campo da outra planilha com o valor do Desejada1
			else if (!valDesejada2) colsDesejadas2[i][0] = valDesejada1;
			// Se o campo do Desejada1 estiver como sim e da outra como n√£o, altere o campo da outra planilha
			else if (valDesejada1 == "SIM") colsDesejadas2[i][0] = "SIM";
			// Se o campo da outra planilha estiver como sim e da outra como n√£o, altere o campo do Desejada1
			else if (valDesejada2 == "SIM") colsDesejadas1[linhaCampoDesejada1 - 2][0] = "SIM";
		}
	}
	
	// Inserindo os valores nas planilhas
	abaDesejada1.getRange(2, colDesejada1, ultimaLinha1, 1).setValues(colsDesejadas1);
	abaDesejada2.getRange(2, colDesejada2, ultimaLinha2, 1).setValues(colsDesejadas2);
}

//Fun√ß√£o que verifica se a pessoa est√° cadastrada na planilha para verificar, e registra em outra planilha
function VerificarEMarcarCadastroOutraPlanilha(abaParaRegistro, colParaRegistro, abaParaVerificar, valCustomizadoSim, valCustomizadoNao) {
	// Atribui as vari√°veis de acordo com a abaDesejada1
	const { ultimaLinha: ultimaLinhaVerificar, colNome: colNomeVerificar, nomePlanilha: nomePlanilhaVerificar } = objetoMap.get(abaParaVerificar);
	// Atribui as vari√°veis de acordo com a abaParaRegistro
	const { ultimaLinha: ultimaLinhaRegistro, colNome: colNomeRegistro, nomePlanilha: nomePlanilhaRegistro } = objetoMap.get(abaParaRegistro);

	// Pegando todos os emails da abaParaVerificar e abaParaRegistro
	const nomesEmailsTelefonesVerificar = abaParaVerificar.getRange(2, colNomeVerificar, ultimaLinhaVerificar, 3).getValues();
	const nomesEmailsTelefonesRegistro = abaParaRegistro.getRange(2, colNomeRegistro, ultimaLinhaRegistro, 3).getValues();

	const colsRegistro = abaParaRegistro.getRange(2, colParaRegistro, ultimaLinhaRegistro, 1).getValues();

	// Loop para percorrer as linhas da abaParaRegistro
	for (let i = 0; i < nomesEmailsTelefonesRegistro.length; i++) {
		const nome = nomesEmailsTelefonesRegistro[i][0];
		const email = nomesEmailsTelefonesRegistro[i][1];
		const telefone = nomesEmailsTelefonesRegistro[i][2];

		// Se n√£o existir email, ou for o "teste" passe para o pr√≥ximo
		if (!email || email.toLowerCase().includes("teste")) continue;

		// Toast da mensagem do progresso de execu√ß√£o da fun√ß√£o
		if (i % 300 === 0) {
			const tituloToast = Math.round(i / ultimaLinhaRegistro * 100) + '% conclu√≠do da fun√ß√£o atual';
			const textoToast = 'Processo na linha ' + i + ' da verifica√ß√£o da planilha ' + nomePlanilhaRegistro + ' para ' + nomePlanilhaVerificar;
			planilhaAtiva.toast(textoToast, tituloToast, tempoNotificacao);
		}

		const existeNaAbaVerificar = RetornarLinhaDados(nome, email, telefone, nomesEmailsTelefonesVerificar);

		// Se o email for encontrado na outra planilha
		if (existeNaAbaVerificar) {
			colsRegistro[i][0] = valCustomizadoSim ?? "SIM";
		} else {
			colsRegistro[i][0] = valCustomizadoNao ?? "N√ÉO";
		}
	}
	
	// Inserindo os valores na abaParaRegistro
	abaParaRegistro.getRange(2, colParaRegistro, ultimaLinhaRegistro, 1).setValues(colsRegistro);
}

// Fun√ß√£o que importa as anota√ß√µes
function ImportarNotas(abaDesejada) {
	// Atribui as vari√°veis de acordo com a abaDesejada
	const { ultimaLinha, colEmail, colNome } = objetoMap.get(abaDesejada);
	const ultimaLinhaGerencial = abaGerencial.getLastRow();

	let anotacoesGerencial = abaGerencial.getRange(2, colAnotacaoGerencial, ultimaLinhaGerencial, 1).getValues().flat();
	let nomesEmailsTelefonesGerencial = abaGerencial.getRange(2, colNomeGerencial, ultimaLinhaGerencial, 3).getValues();

	const notasColunasAbaDesejada = abaDesejada.getRange(2, colEmail, ultimaLinha, 1).getNotes().flat();
	const nomesEmailsTelefonesAbaDesejada = abaDesejada.getRange(2, colNome, ultimaLinha, 3).getValues();

	for (let i = 0; i < notasColunasAbaDesejada.length; i++) {
		const notaDesejada = notasColunasAbaDesejada[i];

		if (!notaDesejada) continue;

		const nome = nomesEmailsTelefonesAbaDesejada[i][0];
		const email = nomesEmailsTelefonesAbaDesejada[i][1];
		const telefone = nomesEmailsTelefonesAbaDesejada[i][2];

		if(!email || email.toLowerCase().includes("teste")) continue;

		const linhaCampoGerencial = RetornarLinhaDados(nome, email, telefone, nomesEmailsTelefonesGerencial);

		if (!linhaCampoGerencial){
			planilhaAtiva.toast('Email n√£o encontrado na planilha gerencial: ' + email, 'Erro', tempoNotificacao);
			continue;
		}

		const anotacaoGerencial = anotacoesGerencial[linhaCampoGerencial - 2];
		let notaInserir;

		// Se j√° existir uma anota√ß√£o na gerencial, e ainda n√£o conter a notaDesejada

		if (anotacaoGerencial){
			if(!(anotacaoGerencial.split(';').includes(notaDesejada))) {
				notaInserir = anotacaoGerencial + '; ' + notaDesejada;
			} else{
				notaInserir = anotacaoGerencial;
			}
		} else {
			notaInserir = notaDesejada;
		}

		anotacoesGerencial[linhaCampoGerencial - 2] = notaInserir;

		const emailGerencial = nomesEmailsTelefonesGerencial[linhaCampoGerencial - 2][1];
		const regex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
		const emailsDaNota = notaDesejada.match(regex) || [];
	
		for(let emailNota of emailsDaNota){
			if(!emailGerencial.includes(emailNota)){
				nomesEmailsTelefonesGerencial[linhaCampoGerencial - 2][1] = emailGerencial + '; ' + emailNota;
			}
		}
	}

	abaGerencial.getRange(2, colAnotacaoGerencial, ultimaLinhaGerencial, 1).setValues(anotacoesGerencial.map(nota => [nota])); // Revertendo o .flat()
	abaGerencial.getRange(2, colNomeGerencial, ultimaLinhaGerencial, 3).setValues(nomesEmailsTelefonesGerencial);
}

function JuntarDados(dadosLinha1, dadosLinha2, primeiraColunaDoIntervalo){

	const primeiraColuna = primeiraColunaDoIntervalo ?? colNomeGerencial;

	let dadosConcatenados = [];
	const colunasDeSimNao = [colTerminouCursoGerencial, colWhatsGerencial, colRespondeuInteresseGerencial, colRespondeuMarcoZeroGerencial, colComentarioEnviadoMapaGerencial, colRespondeuMarcoFinalGerencial, colEnviouReflexaoMarcoFinalGerencial, colComentarioEnviadoMarcoFinalGerencial, colLinkTestadoCertificadoGerencial, colEntrouGrupoCertificadoGerencial];

	for (let i = 0; i < dadosLinha1.length; i++) {
		const colunaAtual = i + primeiraColuna;
		let possuiSimilaridade = false;
		let dado1 = dadosLinha1[i];
		let dado2 = dadosLinha2[i];

		// Exce√ß√µes especiais
		if(colunasDeSimNao.includes(colunaAtual)){
			dadosConcatenados.push(RetornarValorSimNao(dado1, dado2));
			continue;
		}
		if(colunaAtual == colSituacaoGerencial){
			dadosConcatenados.push(RetornarTurmaMaisRecente(dado1, dado2));
			continue;
		}

		// Se o dado1 n√£o existir, adicione o dado2
		if(!dado1) {
			dadosConcatenados.push(dado2);
			continue;
		}
		if(dado2) {
			// Separe o texto pelo ; para caso o campo j√° tiver sido concatenado
			const textosSeparados1 = dado1.toString().split(';');
			
			// Loop para comparar a similaridade para cada um dos textos
			for(let texto of textosSeparados1){
				if(CompararSimilaridade(texto, dado2, 0.9)) possuiSimilaridade = true;
			}

			if(!possuiSimilaridade) {
				dadosConcatenados.push(dado1.trim() + '; ' + dado2.trim());
				continue;
			}
		}
		dadosConcatenados.push(dado1);
	}

	return dadosConcatenados;
}

function RetornarTurmaMaisRecente(string1, string2) {
	// Se uma string n√£o existir, ou for 'ESPERA', retorne a outra
	if (!string1 || string1 === 'ESPERA') return string2;
	if (!string2 || string2 === 'ESPERA') return string1;

	// Separar os n√∫meros antes do tra√ßo (T01-2024 => 01; 2024)
	const regex = /(\d+)-(\d+)/;
	const match1 = string1.match(regex);
	const match2 = string2.match(regex);

	if (!match1 || !match2) return string1;

	// Verificar qual ano √© maior
	if(match1[2] > match2[2]) return string1;
	if(match1[2] < match2[2]) return string2;

	// Anos iguais, verificar qual turma √© maior
	if(match1[1] > match2[1]) return string1;
	if(match1[1] < match2[1]) return string2;

	return string1;
}

function RetornarValorSimNao(valor1, valor2){
	if(!valor1) return valor2;
	if(!valor2) return valor1;
	if(valor1 == "SIM" || valor2 == "SIM") return "SIM";
	return valor1;
}

function CriaContatos() {
	// for para percorrer todas as linhas
	for (let i = ultimaLinhaAnalisadaWhatsGerencial; i <= ultimaLinhaGerencial; i++) {
		// verifica se esta cadastrado no whats ou n√£o 
		const celGerencialWhats = abaGerencial.getRange(i, colWhatsGerencial)
		const whats = celGerencialWhats.getValue();
		if (whats === "N√ÉO") {
			// pega o nome da pessoa e j√° divide o nome e sobrenome para ficar certo quando for criar o contato
			const nomes = abaGerencial.getRange(i, colNomeGerencial).getValue().toString().trim().split(" ");
			const lengthNomes = nomes.length;
			// pega o valor do telefone
			const telefone = abaGerencial.getRange(i, colTelGerencial).getValue();
			// cria o contato 
			const novoContato = People.People.createContact({
				// coloca o nome e sobrenome
				names: [{
					givenName: nomes[0],
					familyName: nomes[lengthNomes]
				}],
				// coloca o n√∫mero de telefone
				phoneNumbers: [{
					value: telefone.toString()
				}]
			});
			celGerencialWhats.setValue("SIM");
		}
	}
}